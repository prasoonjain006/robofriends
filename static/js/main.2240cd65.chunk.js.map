{"version":3,"sources":["components/Card.js","components/CardList.js","Robots.js","components/SearchRobot.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","Robots","map","_user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","Component","App","onSearch","event","setState","SearchField","target","value","fetch","then","response","json","users","filterRobot","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,GAAGC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,MAClB,OACI,yBAAKC,UAAU,kFACX,yBAAKC,IAAG,gCAA2BJ,EAA3B,iBAA8CK,IAAI,QAC1D,6BACI,4BAAKJ,GACL,2BAAIC,MCgBLI,EApBC,SAAC,GAAc,IAAZC,EAAW,EAAXA,OAEf,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKJ,EAAOG,GAAGV,GACfA,GAAIO,EAAOG,GAAGV,GACdC,KAAMM,EAAOG,GAAGT,KAChBC,MAAOK,EAAOG,GAAGR,aCf5BK,EAAQ,CACjB,CACIP,GAAG,EACHC,KAAK,WACLC,MAAM,qBAEV,CACIF,GAAG,EACHC,KAAK,iBACLC,MAAM,sBAEV,CACIF,GAAG,EACHC,KAAK,cACLC,MAAM,qBAEV,CACIF,GAAG,EACHC,KAAK,aACLC,MAAM,mBAEV,CACIF,GAAG,EACHC,KAAK,YACLC,MAAM,sBAEV,CACIF,GAAG,EACHC,KAAK,aACLC,MAAM,mBAEV,CACIF,GAAG,EACHC,KAAK,cACLC,MAAM,oBCnBCU,EAbC,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,aACd,OACI,6BACI,2BACIV,UAAU,6CACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCDXI,G,MAPD,SAACC,GACX,OACI,yBAAKC,MAAQ,CAAEC,UAAW,SAAUC,OAAO,kBAAmBC,OAAO,SAChEJ,EAAMK,YCYJC,E,kDAbX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAO,CACRC,UAAS,GAHC,E,qDAQd,OAAGC,KAAKF,MAAMC,SACH,mDACJC,KAAKT,MAAMK,a,GAXEK,aC6CbC,E,kDAtCX,aAAc,IAAD,8BACT,gBAMJC,SAAS,SAACC,GACN,EAAKC,SAAS,CAACC,YAAYF,EAAMG,OAAOC,SANxC,EAAKV,MAAM,CACPlB,OAAOA,EACP0B,YAAY,IAJP,E,gEAUO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAACzB,OAAQiC,S,+BAGjC,IAAD,EAC0Bb,KAAKF,MAA5BlB,EADH,EACGA,OAAQ0B,EADX,EACWA,YACTQ,EAAalC,EAAOmC,QAAO,SAAAC,GAC7B,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAIrC,EAAOuC,OAIH,yBAAK3C,UAAW,MACZ,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWU,aAAcc,KAAKG,WAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUvB,OAAQkC,OAR3B,wBAAItC,UAAW,MAAf,iB,GAvBDyB,aCIEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAE,EAAF,MADF,KAGAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2240cd65.chunk.js","sourcesContent":["import React from 'react';\r\n// import Robots from './Robots';\r\nconst Card =({id,name,email}) =>{\r\n    return(\r\n        <div className=\"hover-bg-light-blue bg-gold sans-serif dib br3 pa3 ma2 grow b tc bw3 shadow-5 \">\r\n            <img src={`https://robohash.org/e${id}?size=200x200`} alt=\"abc\"></img>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList =({ Robots}) =>{\r\n        \r\n    return(\r\n        <div>\r\n            {\r\n            Robots.map((_user,i)=>{\r\n                return(\r\n                    <Card \r\n                        key={Robots[i].id} \r\n                        id={Robots[i].id} \r\n                        name={Robots[i].name} \r\n                        email={Robots[i].email} />\r\n                    ) \r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default CardList;","export const Robots =[\r\n    {\r\n        id:1,\r\n        name:'Joe Root',\r\n        email:'joeroot@gmail.com',\r\n    },\r\n    {\r\n        id:2,\r\n        name:'Michael Clarke',\r\n        email:'clarke98@gmail.com',\r\n    },\r\n    {\r\n        id:3,\r\n        name:'Shane Warne',\r\n        email:'shane65@gmail.com',\r\n    },\r\n    {\r\n        id:4,\r\n        name:'Ben Stokes',\r\n        email:'benjk@gmail.com',\r\n    },\r\n    {\r\n        id:5,\r\n        name:'Mark Wood',\r\n        email:'markwood@gmail,com',\r\n    },\r\n    {\r\n        id:6,\r\n        name:'Ros Taylor',\r\n        email:'ros35@gmail.com',\r\n    },\r\n    {\r\n        id:7,\r\n        name:'Jos Buttler',\r\n        email:'jos45@gmail.com',\r\n    },\r\n\r\n]","import React from 'react';\r\n\r\nconst SearchBox=({searchChange})=>{\r\n    return(\r\n        <div>\r\n            <input \r\n                className='pa3 tc ba br4 b--red bw2 fw5 bg-light-gray'\r\n                type='search'\r\n                placeholder='search robots'\r\n                onChange={searchChange}\r\n            />\r\n        </div>\r\n    )\r\n    \r\n}\r\nexport default SearchBox; ","import React from 'react';\r\nconst Scroll =(props) =>{\r\n    return(\r\n        <div style= {{ overflowY :'scroll', border:'2px solid white', height:'70vh'      }} >\r\n            {props.children}\r\n        </div>  \r\n    ) ;\r\n}\r\nexport default Scroll; ","import React , { Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            hasError:false\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError)\r\n            return <h1>ooops, looking bad </h1>\r\n        return this.props.children;\r\n    }\r\n}\r\nexport default ErrorBoundary;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport {Robots} from '../Robots';\r\nimport SearchBox from '../components/SearchRobot';\r\nimport './App.css';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\n\r\nclass App extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            Robots:Robots,\r\n            SearchField:''\r\n        }\r\n    }\r\n    onSearch=(event)=>{\r\n        this.setState({SearchField:event.target.value});\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({Robots: users}));\r\n    }\r\n\r\n    render(){\r\n        const {Robots, SearchField} = this.state;\r\n        const filterRobot =Robots.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(SearchField.toLowerCase());\r\n        })\r\n        if(!Robots.length){\r\n            return <h1 className ='tc'> Loading </h1>\r\n        } else {\r\n            return (\r\n                <div className ='tc'>\r\n                    <h1 className=\"f1\" >Robo Friends</h1>\r\n                    <SearchBox searchChange={this.onSearch}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList Robots={filterRobot} />   \r\n                        </ErrorBoundary>\r\n                    </Scroll>     \r\n                </div>   \r\n            );\r\n        }\r\n    } \r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    < App />;\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}